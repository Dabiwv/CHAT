import telebot
from telebot import types
import random

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '6732720595:AAFePTUr9fb4678Avx4Y74ViuSBJQQ8mACM'
bot = telebot.TeleBot(TOKEN)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥
markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1 = types.KeyboardButton("–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
btn2 = types.KeyboardButton("–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞")
btn3 = types.KeyboardButton("–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞")
btn4 = types.KeyboardButton("–ö–æ–º–∞–Ω–¥—ã")
markup.add(btn1, btn2, btn3, btn4)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id

    if message.text == "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ":
        user_state[chat_id] = "guess_number"
        bot.send_message(chat_id, "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!")

    elif message.text == "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞":
        user_state[chat_id] = "rps"
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏: –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥–∞", reply_markup=create_rps_markup())

    elif message.text == "–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞":
        user_state[chat_id] = "slot_machine"
        result = spin_slot_machine()
        bot.send_message(chat_id, result)

    elif message.text == "–ö–æ–º–∞–Ω–¥—ã":
        bot.send_message(chat_id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ\n–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞\n–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞\n–ö–æ–º–∞–Ω–¥—ã")

    elif chat_id in user_state:
        if user_state[chat_id] == "guess_number":
            handle_guess_number(chat_id, message.text)
        elif user_state[chat_id] == "rps":
            handle_rps(chat_id, message.text)
        else:
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")

# –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
def handle_guess_number(chat_id, guess):
    try:
        number = int(guess)
        correct_number = random.randint(1, 10)
        if number == correct_number:
            bot.send_message(chat_id, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –Ø –∑–∞–≥–∞–¥–∞–ª {correct_number}.")
        else:
            bot.send_message(chat_id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –Ø –∑–∞–≥–∞–¥–∞–ª {correct_number}.")
        user_state.pop(chat_id)
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")

# –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞
def create_rps_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ö–∞–º–µ–Ω—å"), types.KeyboardButton("–ù–æ–∂–Ω–∏—Ü—ã"), types.KeyboardButton("–ë—É–º–∞–≥–∞"))
    return markup

def handle_rps(chat_id, user_choice):
    choices = ["–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"]
    bot_choice = random.choice(choices)
    result = ""

    if user_choice == bot_choice:
        result = f"–ù–∏—á—å—è! –Ø –≤—ã–±—Ä–∞–ª {bot_choice}."
    elif (user_choice == "–ö–∞–º–µ–Ω—å" and bot_choice == "–ù–æ–∂–Ω–∏—Ü—ã") or \
         (user_choice == "–ù–æ–∂–Ω–∏—Ü—ã" and bot_choice == "–ë—É–º–∞–≥–∞") or \
         (user_choice == "–ë—É–º–∞–≥–∞" and bot_choice == "–ö–∞–º–µ–Ω—å"):
        result = f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª! –Ø –≤—ã–±—Ä–∞–ª {bot_choice}."
    else:
        result = f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –Ø –≤—ã–±—Ä–∞–ª {bot_choice}."

    bot.send_message(chat_id, result)
    user_state.pop(chat_id)

# –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞
def spin_slot_machine():
    symbols = ["üçí", "üçã", "üîî", "üíé", "7Ô∏è‚É£"]
    slots = [random.choice(symbols) for _ in range(3)]
    result = " | ".join(slots)

    if len(set(slots)) == 1:
        return f"{result}\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!"
    else:
        return f"{result}\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!"

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
